{
  "swagger": "2.0",
  "info": {
    "description": "This is the Razee.io API server.  You can find out more about Razee at [http://razee.io](http://razee.io) or on [slack, #razee](https://ibm-container-service.slack.com/messages/CJQG07QTX).      For this sample, you can use the api key `special-key` to test the authorization     filters.",
    "version": "2.0.0",
    "title": "Razeedash API",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "localhost:3333",
  "basePath": "/api/v2",
  "tags": [
    {
      "name": "clusters",
      "description": "Cluster API used by [Watch-Keeper](https://github.com/razee-io/watch-keeper)",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://razee.io"
      }
    },
    {
      "name": "webhooks",
      "description": "Webhook interface to add external services",
      "externalDocs": {
        "description": "Find out more about webhooks",
        "url": "http://github.com/razee-io/razeedash-api"
      }
    },
    {
      "name": "orgs",
      "description": "Organizations API for managing orgs"
    },
    {
      "name": "resources",
      "description": "Cluster resources"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/orgs/": {
      "post": {
        "tags": [
          "orgs"
        ],
        "summary": "Add an organization",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "org-admin-key",
            "description": "The org admin api key",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "name",
            "description": "The org name to be created",
            "required": true,
            "schema": {
              "type":"string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Org"
            }
          },
          "400": {
            "description": "Missing name or org-admin-key header or the org name already exists"
          },
          "401": {
            "description": "invalid org-admin-key"
          }
        }
      },
      "get": {
        "tags": [
          "orgs"
        ],
        "summary": "Get details of an organization or all organizations",
        "description": "To retrive all orgs use: /orgs \n To retrieve a specific org use: /orgs?name=myOrg \n To retrieve a multiple orgs use: /orgs?name=myOrg1&name=myOrg2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "org-admin-key",
            "description": "organization admin key",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "type": "string",
            "description": "The org name(s) to search. ex: /orgs?name=myOrg1",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/OrgArray" 
            }
          },
          "400": {
            "description": "Missing name or org-admin-key header or the org name already exists"
          },
          "401": {
            "description": "invalid org-admin-key"
          },
          "500": {
            "description": "Error searching for orgs"
          }
        }
      }
    },
    "/orgs/{id}": {
      "put": {
        "tags": [
          "orgs"
        ],
        "summary": "Update an organization",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the org",
            "required": true,
            "type": "string"
          },
          {
            "in": "header",
            "name": "org-admin-key",
            "description": "organization admin key",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The field(s) of the org object to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrgUpdate" 
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Missing resource body or org not found"
          },
          "401": {
            "description": "invalid org-admin-key"
          },
          "500": {
            "description": "Error updating the org"
          }
        }
      },
      "delete": {
        "tags": [
          "orgs"
        ],
        "summary": "Delete an organization",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the org",
            "required": true,
            "type": "string"
          },
          {
            "in": "header",
            "name": "org-admin-key",
            "description": "Organization admin key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "invalid org-admin-key"
          },
          "500": {
            "description": "Error deleting the org"
          }
        }
      }
    },
    "/clusters/": {
      "get": {
        "tags": [
          "clusters"
        ],
        "summary": "Get clusters",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "razee-org-key",
            "description": "organization api key",
            "required": true,
            "type": "string"
          },
          {
            "in": "header",
            "name": "org-admin-key",
            "description": "organization admin key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Cluster" 
            }
          },
          "400": {
            "description": "Missing org-admin-key header"
          },
          "401": {
            "description": "Invalid org-admin-key"
          }
        }
      }
    },
    "/clusters/{cluster_id}": {
      "post": {
        "tags": [
          "clusters"
        ],
        "summary": "Add/Update Cluster",
        "description": "",
        "operationId": "addUpdateCluster",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "description": "ID of cluster",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Cluster definition",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "205": {
            "description": "Please resync"
          }
        }
      },
      "delete": {
        "tags": [
          "clusters"
        ],
        "summary": "Delete a cluster",
        "description": "Delete a cluster and its resources",
        "operationId": "deleteCluster",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "description": "ID of cluster",
            "required": true,
            "type": "string"
          },
          {
            "in": "header",
            "name": "razee-org-key",
            "description": "organization api key",
            "required": true,
            "type": "string"
          },
          {
            "in": "header",
            "name": "org-admin-key",
            "description": "organization admin key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Cluster resources removed"
          },
          "403": {
            "description": "Cluster not found"
          },
          "500": {
            "description": "Error removing cluster"
          }
        }
      }
    },
    "/clusters/{cluster_id}/resources": {
      "post": {
        "tags": [
          "clusters"
        ],
        "summary": "Update cluster resources",
        "description": "",
        "operationId": "updateClusterResources",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "description": "ID of cluster",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Resource definition",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "205": {
            "description": "Please resync"
          },
          "400": {
            "description": "Missing resource body"
          }
        }
      }
    },
    "/clusters/{cluster_id}/messages": {
      "post": {
        "tags": [
          "clusters"
        ],
        "summary": "Add cluster messages",
        "description": "Logging messages from Watch Keeper",
        "operationId": "addClusterMessages",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "description": "ID of cluster",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Message definition",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Missing message body"
          }
        }
      }
    },
    "/webhooks/": {
      "post": {
        "tags": [
          "webhooks"
        ],
        "summary": "Create webhook",
        "description": "Create a webhook trigger",
        "operationId": "addWebhook",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Webhook definition",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Missing message body"
          }
        }
      }
    },
    "/webhooks/{webhook_id}/callback": {
      "post": {
        "tags": [
          "webhooks"
        ],
        "summary": "Webhook Callback",
        "description": "External service callback in response to webhook trigger",
        "operationId": "addCallbackResult",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "description": "ID of webhook",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Webhook definition",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Missing message body"
          }
        }
      }
    },
    "/webhooks/{webhook_id}": {
      "delete": {
        "tags": [
          "webhooks"
        ],
        "summary": "Delete a webhook",
        "description": "Remove a webhook",
        "operationId": "deleteWebhook",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "description": "ID of webhook",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success"
          }
        }
      }
    },
    "/resources/": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Get a resource definition",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "org-admin-key",
            "description": "The org admin api key",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "kind",
            "type": "string",
            "description": "The resource type to search. ex: /resources?kind=Deployment",
            "required": false
          },
          {
            "in": "query",
            "name": "name",
            "type": "string",
            "description": "The resource name to search. ex: /resources?name=myResource",
            "required": false
          },
          {
            "in": "query",
            "name": "skip",
            "type": "string",
            "description": "Skip the first 25 results. ex: /resources?skip=25",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "type": "string",
            "description": "Limit the number of resources to return.  Max limit is 10000 and the default is 25. ex: /resources?limit=100",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          },
          "400": {
            "description": "Missing name or org-admin-key header or the org name already exists"
          },
          "401": {
            "description": "invalid org-admin-key"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "razee-org-key": {
      "type": "apiKey",
      "name": "razee-org-key",
      "in": "header"
    },
    "org-admin-key": {
      "type": "apiKey",
      "name": "org-admin-key",
      "in": "header"
    }
  },
  "definitions": {
    "Org": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "orgKeys": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "created": {
          "type": "string"
        },
        "updated": {
          "type": "string"
        }
      }
    },
    "OrgUpdate": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "orgKeys": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "OrgNew": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "orgAdminKey": {
          "type": "string"
        }
      },
      "required": ["name", "orgAdminKey"]
    },
    "OrgArray": {
      "type": "array",
      "items": {
        "type": "object",
        "$ref": "#/definitions/Org"
      }
    },
    "Cluster": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "cluster_id": {
          "type": "string"
        },
        "org_id": {
          "type": "string"
        },
        "metadata": {
          "type": "object"
        }
      }
    },
    "Message": {
      "type": "object",
      "properties": {
        "level": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "type": "object"
        }
      }
    },
    "Resource": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "SYNC",
            "POLLED",
            "MODIFIED",
            "ADDED",
            "DELETED"
          ]
        },
        "data": {
          "type": "object",
          "properties": {
            "kind": {
              "type": "string"
            },
            "apiVersion": {
              "type": "string"
            },
            "spec": {
              "type": "object"
            }
          }
        },
        "cluster_id": { "type": "string" },
        "org_id": { "type": "string" },
        "selfLink": { "type": "string" },
        "created": { "type": "string", "format": "date" },
        "updated": { "type": "string", "format": "date" },
        "deleted": { "type": "boolean" },
        "hash": { "type": "string" },
        "searchableData": { 
          "type": "object",
          "properties": {
            "kind": { "type": "string" },
            "name": { "type": "string" },
            "namespace": { "type": "string" },
            "apiVersion": { "type": "string" }
          }
        },
        "searchableDataHash": { "type": "string" },
        "searchableDataHist": { 
          "type": "object",
          "properties": {
            "kind": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "timestamp": { "type": "integer"},
                  "val": { "type": "string"}
                }
              }
            },
            "name": { 
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "timestamp": { "type": "integer"},
                  "val": { "type": "string"}
                }
              }
            },
            "namespace": { 
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "timestamp": { "type": "integer"},
                  "val": { "type": "string"}
                }
              } 
            },
            "apiVersion": { 
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "timestamp": { "type": "integer"},
                  "val": { "type": "string"}
                }
              }
            }
          }
        }
      }
    },
    "Webhook": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Generated Webhook ID"
        },
        "org_id": {
          "type": "string",
          "description": "Organization ID"
        },
        "cluster_id": {
          "type": "string",
          "description": "Cluster ID"
        },
        "service_url": {
          "type": "string",
          "description": "External service URL for webhook to call when triggered"
        },
        "kind": {
          "type": "string"
        },
        "field": {
          "type": "string",
          "description": "Dot notation to the field to run regex filter. Example, 'metadata.name'"
        },
        "filter": {
          "type": "string",
          "description": "Regex to apply against the 'field'."
        },
        "trigger": {
          "type": "string",
          "description": "Type of event that triggers webhook.  Currently new image and cluster resource changes are the implimented triggers.",
          "enum": [
            "cluster",
            "image"
          ]
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Razee",
    "url": "http://razee.io"
  }
}
